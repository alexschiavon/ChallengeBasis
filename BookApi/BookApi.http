@BookApi_HostAddress = https://localhost:32770
@bookId = d8d9a82b-7821-42ad-9505-83b0e99d0f32
@authorId = 0263859b-8326-428e-bfa1-1ccaf3cb1e53
@subjectId = 37ff9aaf-6d6c-4196-86f8-5ec8e5325151


GET {{BookApi_HostAddress}}/api/books
Accept: application/json

###

GET https://localhost:32770/api/books?Pagination.Limit=100&Pagination.CurrentPage=0&SortedBy.Order=ASC


### Get all books and capture the first bookId
GET {{BookApi_HostAddress}}/api/books?Pagination.Limit=100&Pagination.CurrentPage=0&SortedBy.Order=ASC
Accept: application/json

> {% 
  const response = pm.response.json();
  const firstBookId = response.content[0].bookId;
  pm.environment.set("bookId", firstBookId);
%}

###

### Get a single book by ID using the captured bookId
GET {{BookApi_HostAddress}}/api/books/{{bookId}}
Accept: application/json

###

### Create a new book
POST {{BookApi_HostAddress}}/api/books
Content-Type: application/json

{
  "title": "New Book",
  "publisher": "New Publisher",
  "edition": 1,
  "publicationYear": "2023"
}

###

### Update an existing book using the captured bookId
PUT {{BookApi_HostAddress}}/api/books/{{bookId}}
Content-Type: application/json

{
  "bookId": "{{bookId}}",
  "title": "Updated Book",
  "publisher": "Updated Publisher",
  "edition": 2,
  "publicationYear": "2024"
}

###

### Delete a book by ID using the captured bookId
DELETE {{BookApi_HostAddress}}/api/books/{{bookId}}
Accept: application/json

### Authors API

GET {{BookApi_HostAddress}}/api/authors
Accept: application/json


### Get all authors and capture the first authorId
GET {{BookApi_HostAddress}}/api/authors?Pagination.Limit=100&Pagination.CurrentPage=0&SortedBy.Order=ASC
Accept: application/json

> {% 
  const response = pm.response.json();
  const firstAuthorId = response.content[0].authorId;
  pm.environment.set("authorId", firstAuthorId);
%}

###

### Get a single author by ID using the captured authorId
GET {{BookApi_HostAddress}}/api/authors/{{authorId}}
Accept: application/json

###

### Create a new author
POST {{BookApi_HostAddress}}/api/authors
Content-Type: application/json

{
  "name": "New Author",
  "bio": "Bio of the new author"
}

###

### Update an existing author using the captured authorId
PUT {{BookApi_HostAddress}}/api/authors/{{authorId}}
Content-Type: application/json

{
  "authorId": "{{authorId}}",
  "name": "Updated Author",
  "bio": "Updated bio of the author"
}

###

### Delete an author by ID using the captured authorId
DELETE {{BookApi_HostAddress}}/api/authors/{{authorId}}
Accept: application/json

### Subjects API

GET {{BookApi_HostAddress}}/api/subjects
Accept: application/json

### Get all subjects and capture the first subjectId
GET {{BookApi_HostAddress}}/api/subjects?Pagination.Limit=100&Pagination.CurrentPage=0&SortedBy.Order=ASC
Accept: application/json

> {% 
  const response = pm.response.json();
  const firstSubjectId = response.content[0].subjectId;
  pm.environment.set("subjectId", firstSubjectId);
%}

###

### Get a single subject by ID using the captured subjectId
GET {{BookApi_HostAddress}}/api/subjects/{{subjectId}}
Accept: application/json

###

### Create a new subject
POST {{BookApi_HostAddress}}/api/subjects
Content-Type: application/json

{
  "description": "New Subject"
}

###

### Update an existing subject using the captured subjectId
PUT {{BookApi_HostAddress}}/api/subjects/{{subjectId}}
Content-Type: application/json

{
  "subjectId": "{{subjectId}}",
  "description": "Updated Subject"
}

###

### Delete a subject by ID using the captured subjectId
DELETE {{BookApi_HostAddress}}/api/subjects/{{subjectId}}
Accept: application/json